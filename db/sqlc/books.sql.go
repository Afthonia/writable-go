// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: books.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
    author_id,
    title,
    subtitle
) VALUES (
    $1, $2, $3
) RETURNING id, 0::bigint as author_id, '' as author, title, COALESCE(subtitle, '')::text as subtitle, '{}'::text[] as tags, created_at
`

type CreateBookParams struct {
	AuthorID int64          `json:"author_id"`
	Title    string         `json:"title"`
	Subtitle sql.NullString `json:"subtitle"`
}

type CreateBookRow struct {
	ID        int64     `json:"id"`
	AuthorID  int64     `json:"author_id"`
	Author    string    `json:"author"`
	Title     string    `json:"title"`
	Subtitle  string    `json:"subtitle"`
	Tags      []string  `json:"tags"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (CreateBookRow, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.AuthorID, arg.Title, arg.Subtitle)
	var i CreateBookRow
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Author,
		&i.Title,
		&i.Subtitle,
		pq.Array(&i.Tags),
		&i.CreatedAt,
	)
	return i, err
}
